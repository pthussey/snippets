To create a new repository using GitHub Desktop:
1. Click on File - New Repository
2. Choose a name for the repository
   * This will create a folder in the chosen Local Path
3. Enter other details and Create Repository
   
How to create a github repo from an existing folder using GitHub Desktop:
1. Add local repository
2. Choose 'create a repository' from the warning message
3. Create it and push to github

How to add a local repo from an existing github repo
- This is a cloning action
- Click the green "Code" button on the github repo
- Then copy and paste the necessary command line command
- Or activate github desktop and create it that way

How to clone one of my repositories so I can work on it on multiple machines
Cloning one of my own repositories from github to a different machine allows me to work on it from multiple machines.
Before working on it though I need to pull other changes over to the machine I will work on to keep things in sync.
Steps in GitHub Desktop:
1. Go to File - Clone a repository
2. Choose the folder in Local Path
   * Do not add a new folder to the path because a new folder with the repo name will be created.
3. Choose the repository from Your Repositories
4. Click Clone

To initialize a new repository
Navigate to the folder for the project and use:
git init

To add to staging and commit all files in directory
git add .
git status (this is used to view the changes in the staging area before committing)
git commit

To create a remote repo on GitHub
- Go to GitHub and create a new repository
- After giving it a name and clicking the 'Create Repository' button some options appear
- Follow the instructions in the "…or push an existing repository from the command line" section:
git remote add origin https://github.com/pthussey/<repo-name>.git
git branch -M main
git push -u origin main

To create and switch to a new branch
git checkout -b ＜new-branch＞

To switch to a branch
git checkout ＜branchname＞

To push changes to the remote
git push

To delete a branch
git branch -d <branch>
(Need to use a capital D if the branch has not yet been pushed and merged

To merge a branch back into main
- First make sure the branch is updated with the latest commit
- Then change to the main branch (git checkout main/master)
- Then merge the branch into main (git merge <branch-name>)
- Then finally delete the branch (git branch -d <branch-name>)

To navigate around previous commits use git log to see the commit IDs
Then use git checkout <commit ID>
To go back to the head (tip) use git checkout <brachname> (ie. git checkout main)

To restore a file from a previous commit
git checkout [commit ID] -- path/to/file
From this source: https://dev.to/lofiandcode/git-and-github-how-to-revert-a-single-file-dha

List all tracked files in a repository
git ls-tree -r master --name-only
